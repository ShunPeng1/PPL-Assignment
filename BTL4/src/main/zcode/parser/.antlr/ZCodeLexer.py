# Generated from c:/Users/PC/Downloads/PPL/PPL Assignment/BTL4/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,49,389,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,145,8,5,10,5,12,5,148,9,5,1,5,
        1,5,1,6,1,6,1,6,3,6,155,8,6,1,6,1,6,1,7,4,7,160,8,7,11,7,12,7,161,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
        37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,
        41,1,41,1,42,1,42,3,42,287,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,
        44,1,44,1,44,1,44,1,44,1,45,1,45,5,45,302,8,45,10,45,12,45,305,9,
        45,1,46,1,46,3,46,309,8,46,1,46,3,46,312,8,46,1,47,4,47,315,8,47,
        11,47,12,47,316,1,48,1,48,5,48,321,8,48,10,48,12,48,324,9,48,1,49,
        1,49,3,49,328,8,49,1,49,4,49,331,8,49,11,49,12,49,332,1,50,1,50,
        1,50,1,50,1,50,1,50,3,50,341,8,50,5,50,343,8,50,10,50,12,50,346,
        9,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
        3,52,360,8,52,5,52,362,8,52,10,52,12,52,365,9,52,1,52,3,52,368,8,
        52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,378,8,53,5,53,380,
        8,53,10,53,12,53,383,9,53,1,53,3,53,386,8,53,1,53,1,53,0,0,54,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,44,93,
        45,95,0,97,0,99,0,101,46,103,47,105,48,107,49,1,0,15,2,0,10,10,12,
        13,3,0,8,9,12,12,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,5,0,10,10,
        12,13,34,34,39,39,92,92,1,0,92,92,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,1,0,39,39,4,0,8,8,10,10,12,13,92,92,3,0,
        34,34,39,39,92,92,3,0,8,8,12,12,92,92,1,1,34,34,406,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,116,1,0,0,0,
        5,121,1,0,0,0,7,128,1,0,0,0,9,132,1,0,0,0,11,140,1,0,0,0,13,154,
        1,0,0,0,15,159,1,0,0,0,17,165,1,0,0,0,19,171,1,0,0,0,21,175,1,0,
        0,0,23,180,1,0,0,0,25,187,1,0,0,0,27,190,1,0,0,0,29,195,1,0,0,0,
        31,200,1,0,0,0,33,204,1,0,0,0,35,210,1,0,0,0,37,213,1,0,0,0,39,219,
        1,0,0,0,41,228,1,0,0,0,43,231,1,0,0,0,45,233,1,0,0,0,47,235,1,0,
        0,0,49,237,1,0,0,0,51,239,1,0,0,0,53,241,1,0,0,0,55,243,1,0,0,0,
        57,245,1,0,0,0,59,247,1,0,0,0,61,249,1,0,0,0,63,251,1,0,0,0,65,255,
        1,0,0,0,67,259,1,0,0,0,69,262,1,0,0,0,71,264,1,0,0,0,73,267,1,0,
        0,0,75,269,1,0,0,0,77,272,1,0,0,0,79,274,1,0,0,0,81,277,1,0,0,0,
        83,281,1,0,0,0,85,286,1,0,0,0,87,288,1,0,0,0,89,293,1,0,0,0,91,299,
        1,0,0,0,93,306,1,0,0,0,95,314,1,0,0,0,97,318,1,0,0,0,99,325,1,0,
        0,0,101,334,1,0,0,0,103,350,1,0,0,0,105,353,1,0,0,0,107,371,1,0,
        0,0,109,110,5,110,0,0,110,111,5,117,0,0,111,112,5,109,0,0,112,113,
        5,98,0,0,113,114,5,101,0,0,114,115,5,114,0,0,115,2,1,0,0,0,116,117,
        5,98,0,0,117,118,5,111,0,0,118,119,5,111,0,0,119,120,5,108,0,0,120,
        4,1,0,0,0,121,122,5,115,0,0,122,123,5,116,0,0,123,124,5,114,0,0,
        124,125,5,105,0,0,125,126,5,110,0,0,126,127,5,103,0,0,127,6,1,0,
        0,0,128,129,5,118,0,0,129,130,5,97,0,0,130,131,5,114,0,0,131,8,1,
        0,0,0,132,133,5,100,0,0,133,134,5,121,0,0,134,135,5,110,0,0,135,
        136,5,97,0,0,136,137,5,109,0,0,137,138,5,105,0,0,138,139,5,99,0,
        0,139,10,1,0,0,0,140,141,5,35,0,0,141,142,5,35,0,0,142,146,1,0,0,
        0,143,145,8,0,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,
        0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,0,0,0,149,150,6,5,0,
        0,150,12,1,0,0,0,151,152,5,13,0,0,152,155,5,10,0,0,153,155,5,10,
        0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,157,6,6,
        1,0,157,14,1,0,0,0,158,160,7,1,0,0,159,158,1,0,0,0,160,161,1,0,0,
        0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,6,7,0,
        0,164,16,1,0,0,0,165,166,5,98,0,0,166,167,5,101,0,0,167,168,5,103,
        0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,18,1,0,0,0,171,172,5,
        101,0,0,172,173,5,110,0,0,173,174,5,100,0,0,174,20,1,0,0,0,175,176,
        5,102,0,0,176,177,5,117,0,0,177,178,5,110,0,0,178,179,5,99,0,0,179,
        22,1,0,0,0,180,181,5,114,0,0,181,182,5,101,0,0,182,183,5,116,0,0,
        183,184,5,117,0,0,184,185,5,114,0,0,185,186,5,110,0,0,186,24,1,0,
        0,0,187,188,5,105,0,0,188,189,5,102,0,0,189,26,1,0,0,0,190,191,5,
        101,0,0,191,192,5,108,0,0,192,193,5,115,0,0,193,194,5,101,0,0,194,
        28,1,0,0,0,195,196,5,101,0,0,196,197,5,108,0,0,197,198,5,105,0,0,
        198,199,5,102,0,0,199,30,1,0,0,0,200,201,5,102,0,0,201,202,5,111,
        0,0,202,203,5,114,0,0,203,32,1,0,0,0,204,205,5,117,0,0,205,206,5,
        110,0,0,206,207,5,116,0,0,207,208,5,105,0,0,208,209,5,108,0,0,209,
        34,1,0,0,0,210,211,5,98,0,0,211,212,5,121,0,0,212,36,1,0,0,0,213,
        214,5,98,0,0,214,215,5,114,0,0,215,216,5,101,0,0,216,217,5,97,0,
        0,217,218,5,107,0,0,218,38,1,0,0,0,219,220,5,99,0,0,220,221,5,111,
        0,0,221,222,5,110,0,0,222,223,5,116,0,0,223,224,5,105,0,0,224,225,
        5,110,0,0,225,226,5,117,0,0,226,227,5,101,0,0,227,40,1,0,0,0,228,
        229,5,60,0,0,229,230,5,45,0,0,230,42,1,0,0,0,231,232,5,40,0,0,232,
        44,1,0,0,0,233,234,5,41,0,0,234,46,1,0,0,0,235,236,5,91,0,0,236,
        48,1,0,0,0,237,238,5,93,0,0,238,50,1,0,0,0,239,240,5,44,0,0,240,
        52,1,0,0,0,241,242,5,43,0,0,242,54,1,0,0,0,243,244,5,45,0,0,244,
        56,1,0,0,0,245,246,5,42,0,0,246,58,1,0,0,0,247,248,5,47,0,0,248,
        60,1,0,0,0,249,250,5,37,0,0,250,62,1,0,0,0,251,252,5,110,0,0,252,
        253,5,111,0,0,253,254,5,116,0,0,254,64,1,0,0,0,255,256,5,97,0,0,
        256,257,5,110,0,0,257,258,5,100,0,0,258,66,1,0,0,0,259,260,5,111,
        0,0,260,261,5,114,0,0,261,68,1,0,0,0,262,263,5,61,0,0,263,70,1,0,
        0,0,264,265,5,33,0,0,265,266,5,61,0,0,266,72,1,0,0,0,267,268,5,60,
        0,0,268,74,1,0,0,0,269,270,5,60,0,0,270,271,5,61,0,0,271,76,1,0,
        0,0,272,273,5,62,0,0,273,78,1,0,0,0,274,275,5,62,0,0,275,276,5,61,
        0,0,276,80,1,0,0,0,277,278,5,46,0,0,278,279,5,46,0,0,279,280,5,46,
        0,0,280,82,1,0,0,0,281,282,5,61,0,0,282,283,5,61,0,0,283,84,1,0,
        0,0,284,287,3,87,43,0,285,287,3,89,44,0,286,284,1,0,0,0,286,285,
        1,0,0,0,287,86,1,0,0,0,288,289,5,116,0,0,289,290,5,114,0,0,290,291,
        5,117,0,0,291,292,5,101,0,0,292,88,1,0,0,0,293,294,5,102,0,0,294,
        295,5,97,0,0,295,296,5,108,0,0,296,297,5,115,0,0,297,298,5,101,0,
        0,298,90,1,0,0,0,299,303,7,2,0,0,300,302,7,3,0,0,301,300,1,0,0,0,
        302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,92,1,0,0,0,305,
        303,1,0,0,0,306,308,3,95,47,0,307,309,3,97,48,0,308,307,1,0,0,0,
        308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,99,49,0,311,310,1,0,0,
        0,311,312,1,0,0,0,312,94,1,0,0,0,313,315,7,4,0,0,314,313,1,0,0,0,
        315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,96,1,0,0,0,318,
        322,5,46,0,0,319,321,7,4,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,
        320,1,0,0,0,322,323,1,0,0,0,323,98,1,0,0,0,324,322,1,0,0,0,325,327,
        7,5,0,0,326,328,7,6,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,
        1,0,0,0,329,331,7,4,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,
        1,0,0,0,332,333,1,0,0,0,333,100,1,0,0,0,334,344,5,34,0,0,335,343,
        8,7,0,0,336,337,7,8,0,0,337,343,7,9,0,0,338,340,7,10,0,0,339,341,
        8,11,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,335,
        1,0,0,0,342,336,1,0,0,0,342,338,1,0,0,0,343,346,1,0,0,0,344,342,
        1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,
        5,34,0,0,348,349,6,50,2,0,349,102,1,0,0,0,350,351,9,0,0,0,351,352,
        6,51,3,0,352,104,1,0,0,0,353,363,5,34,0,0,354,362,8,12,0,0,355,356,
        7,8,0,0,356,362,7,9,0,0,357,359,7,10,0,0,358,360,8,13,0,0,359,358,
        1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,354,1,0,0,0,361,355,
        1,0,0,0,361,357,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,366,368,7,14,0,0,367,366,
        1,0,0,0,368,369,1,0,0,0,369,370,6,52,4,0,370,106,1,0,0,0,371,381,
        5,34,0,0,372,380,8,12,0,0,373,374,7,8,0,0,374,380,9,0,0,0,375,377,
        7,10,0,0,376,378,8,13,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,380,
        1,0,0,0,379,372,1,0,0,0,379,373,1,0,0,0,379,375,1,0,0,0,380,383,
        1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,385,1,0,0,0,383,381,
        1,0,0,0,384,386,7,14,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,388,
        6,53,5,0,388,108,1,0,0,0,23,0,146,154,161,286,303,308,311,316,322,
        327,332,340,342,344,359,361,363,367,377,379,381,385,6,6,0,0,1,6,
        0,1,50,1,1,51,2,1,52,3,1,53,4
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_TYPE = 1
    BOOLEAN_TYPE = 2
    STRING_TYPE = 3
    VAR = 4
    DYNAMIC = 5
    COMMENT = 6
    NEWLINE = 7
    WHITESPACE = 8
    BEGIN = 9
    END = 10
    FUNC = 11
    RETURN = 12
    IF = 13
    ELSE = 14
    ELIF = 15
    FOR = 16
    UNTIL = 17
    BY = 18
    BREAK = 19
    CONTINUE = 20
    ASSIGN = 21
    LPAREN = 22
    RPAREN = 23
    LBRACK = 24
    RBRACK = 25
    COMMA = 26
    PLUS = 27
    MINUS = 28
    MULTIPLY = 29
    DIVIDE = 30
    MOD = 31
    NOT = 32
    AND = 33
    OR = 34
    EQUAL = 35
    NOT_EQUAL = 36
    LT = 37
    LE = 38
    GT = 39
    GE = 40
    CONCATE = 41
    STRING_EQUAL = 42
    BOOLEAN_LIT = 43
    IDENTIFIER = 44
    NUMBER_LIT = 45
    STRING_LIT = 46
    ERROR_CHAR = 47
    UNCLOSE_STRING = 48
    ILLEGAL_ESCAPE = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'var'", "'dynamic'", "'begin'", 
            "'end'", "'func'", "'return'", "'if'", "'else'", "'elif'", "'for'", 
            "'until'", "'by'", "'break'", "'continue'", "'<-'", "'('", "')'", 
            "'['", "']'", "','", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", 
            "'and'", "'or'", "'='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_TYPE", "BOOLEAN_TYPE", "STRING_TYPE", "VAR", "DYNAMIC", 
            "COMMENT", "NEWLINE", "WHITESPACE", "BEGIN", "END", "FUNC", 
            "RETURN", "IF", "ELSE", "ELIF", "FOR", "UNTIL", "BY", "BREAK", 
            "CONTINUE", "ASSIGN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
            "COMMA", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "NOT", 
            "AND", "OR", "EQUAL", "NOT_EQUAL", "LT", "LE", "GT", "GE", "CONCATE", 
            "STRING_EQUAL", "BOOLEAN_LIT", "IDENTIFIER", "NUMBER_LIT", "STRING_LIT", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "NUMBER_TYPE", "BOOLEAN_TYPE", "STRING_TYPE", "VAR", "DYNAMIC", 
                  "COMMENT", "NEWLINE", "WHITESPACE", "BEGIN", "END", "FUNC", 
                  "RETURN", "IF", "ELSE", "ELIF", "FOR", "UNTIL", "BY", 
                  "BREAK", "CONTINUE", "ASSIGN", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "COMMA", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "MOD", "NOT", "AND", "OR", "EQUAL", "NOT_EQUAL", "LT", 
                  "LE", "GT", "GE", "CONCATE", "STRING_EQUAL", "BOOLEAN_LIT", 
                  "TRUE", "FALSE", "IDENTIFIER", "NUMBER_LIT", "NUMBER_INTERGER", 
                  "NUMBER_DECIMAL", "NUMBER_EXPONENT", "STRING_LIT", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[6] = self.NEWLINE_action 
            actions[50] = self.STRING_LIT_action 
            actions[51] = self.ERROR_CHAR_action 
            actions[52] = self.UNCLOSE_STRING_action 
            actions[53] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            self.text = self.text.replace('\r', '')

     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            self.text = self.text[1:-1]

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            raise ErrorToken(self.text)

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:


            index = len(self.text)
            if self.text.find('\r') != -1:
            	index = min(index, self.text.find('\r'))
            if self.text.find('\n') != -1:
            	index = min(index, self.text.find('\n'))
            if self.text.find('\f') != -1:
            	index = min(index, self.text.find('\f'))

            raise UncloseString(self.text[1:index] if index != len(self.text) else self.text[1:]) # if end with \n else end with EOF

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:


            end_index = -1
            for i in range(1, len(self.text)):
                if self.text[i-1] != '\\' and  self.text[i] == '\\' and self.text[i+1] not in '\\nrtbf':
                    end_index = i + 2
                    break


            #print("Original text: ", self.text, ", Fix: ", self.text[1:end_index])
            raise IllegalEscape(self.text[1:end_index])


     


